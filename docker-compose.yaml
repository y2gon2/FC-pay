version: "3.8"

# docker-compose : service 의 집합
#                  여러 service 들을 어떻게 docker 설정을 하여 올릴 것인가
# 최상위 version, services, networks

# 실행 : docker-compose up -d

services:
#  zookeeper:
#    image: 'arm64v8/zookeeper:3.8'
#    networks:
#      - fc_pay_network
#    ports:
#      - '2181:2181'
#    environment:
#      - ALLOW_ANONYMOUS_LOGIN=yes
#      - ZOO_TLS_CLIENT_AUTH=none
#      - ZOO_TLS_QUORUM_CLIENT_AUTH=none
#
#  kafka:
#    image: 'bitnami/kafka:3.4.0'
#    networks:
#      - fs_pay_network
#    ports:
#      - '9092:9092'
#    environment:
#      - KAFKA_BROKER_ID=1
#      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
#      - ALLOW_PLAINTEXT_LISTENER=yes
#      - KAFKA_CFG_LISTENERS=LC://kafka:29092,LX://kafka:9092
#      - KAFKA_CFG_ADVERTISED_LISTENERS=LC://kafka:29092,LX://${DOCKER_HOST_IP:-localhost}:9092
#      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=LC:PLAINTEXT,LX:PLAINTEXT
#      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=LC
#    depends_on:
#      - zookeeper
#
#  kafka-ui:
#    image: provectuslabs/kafka-ui
#    container_name: kafka-ui
#    networks:
#      - fc_pay_network
#    ports:
#      - "8989:8080"
#    restart: always
#    depends_on:
#      - kafka
#      - zookeeper
#    environment:
#      - KAFKA_CLUSTERS_0_NAME=local
#      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
#      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181

  mysql:
    image: mysql:8.1.0
    networks:
      - fc_pay_network
    volumes:
      - ./db/conf.d:/etc/mysql/conf.d #  local_project_folder:docker_folder => 해당 위치 파일들 끼리 mapping 시킴.
      - ./db/data:/var/lib/mysql
      - ./db/initdb.d:/docker-entrypoint-initdb.d
    env_file: .env
    ports:
      - "3307:3306"
    environment:
#      - MYSQL_ROOT_PASSWORD=rootpassword # .env 중복
#      - MYSQL_USER=mysqluser             # .env 중복
#      - MYSQL_PASSWORD=mysqlpw           # .env 중복
      - TZ=Asia/Seoul

#  axon-server:
#    container_name: axon-server
#    image: axoniq/axonserver:2023.2.1-jdk-17
#    networks:
#      - fc_pay_network
#    ports:
#      - "8024:8024"
#      - "8124:8124"
#    volumes:
#      - axonserver-data:/axonserver/data
#      - axonserver-events:/axonserver/events
#      - axonserver-config:/axonserver/config:ro

  membership-service:
    image: fc-pay-membership-service:0.0.1
    networks:
      - fc_pay_network
    ports:
      - "8081:8080"
    depends_on: # 여기에 명시된 image 들이 떠야 해당 service 도 실행됨.
#      - axon-server
      - mysql
    environment:
#      - AXON_AXONSERVER_SERVERS=axon-server:8124
#      - AXON_SERIALIZER_EVENTS=jackson
#      - AXON_SERIALIZER_MESSAGES=jackson
#      - AXON_SERIALIZER_GENERAL=xstream
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/fc_pay?useSSL=false&allowPublicKeyRetrieval=true
      - SPRING_DATASOURCE_USERNAME=mysqluser
      - SPRING_DATASOURCE_PASSWORD=mysqlpw
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.MySQL8Dialect # Hibernate 6.x 버전
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update

  banking-service:
    image: fc-pay-banking-service:0.0.1
    networks:
      - fc_pay_network
    ports:
      - "8082:8080"
    depends_on:
      - mysql
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/fc_pay?useSSL=false&allowPublicKeyRetrieval=true
      - SPRING_DATASOURCE_USERNAME=mysqluser
      - SPRING_DATASOURCE_PASSWORD=mysqlpw
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.MySQL8Dialect # Hibernate 6.x 버전
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update


#volumes:
#  axonserver-data:
#    driver: local
#    driver_opts:
#      o: bind
#      type: none
#      device: ${PWD}/axon-server-se/data
#  axonserver-event:
#    driver: local
#    driver_opts:
#      o: bind
#      type: none
#      device: ${PWD}/axon-server-se/events
#  axonserver-config:
#    driver: local
#    driver_opts:
#      o: bind
#      type: none
#      device: ${PWD}/axon-server-se/config

# Docker container 를 서로 연걸하고 통신할 수 있는 network를 정의하는 부분
# network container 간 통신을 가능하게 하며, 각 container 는 하나 이상의 network 에 속할 수 있다.
networks:
  fc_pay_network:
    driver: bridge
    # "bridge" 네트워크 드라이버는 도커 호스트의 가상 네트워크를 생성하고, 컨테이너를 해당 가상 네트워크에 연결
    # 이 가상 네트워크는 호스트 컴퓨터와 도커 컨테이너 간의 통신을 위한 로컬 네트워크를 제공함.
    # 컨테이너 간 통신 또한 가능하며, 호스트 머신에서 컨테이너로 요청을 전달할 수 있음.

